[{"id": 7, "user_id": 4, "title": "Create a Blog from scratch using Python-Flask and ReactJS w/ TypeScript deployed to Heroku", "body": "## Abstract \n\nEvery developer should have a blog; at least for themselves. I knew this but have never created one. The reason being? I'm a developer so I should of course use I blog I developed myself. Well I finally created one! So of course the first few posts I make should be about how to create a full blogging framework from scratch.\n\n\n### [Note] \n#### This blog is still in development but I have the basic features of Authenticating users and admins. A way to create /edit /remove blog posts as an admin and a basic way to display blog posts.\n\n## Features:\n * Authentication\n * * Basic\n * * Admin\n\n * Admin Dashboard\n\n * Post\n * * View\n * * Create\n * * Edit\n * * Delete\n\n## Updates:\n[11/1/22] Admin can create new posts, edit existing posts, and remove posts\n\n\n## Tech Stack\n\n#### High Level View of the Tech Stack\n * Backend -> Python -> Flask -> SQLAlchemy -> JWT\n * Frontend -> ReactJS -> React Router -> Axios -> Bootstrap 5 -> React Markup\n * All Hosted on Heroku \n\n\nI do not yet have a way to make posts private or be marked as a Draft. \n", "private": false, "draft": false, "created_at": "2022-11-09T07:30:00.054299", "updated_at": null}, {"id": 8, "user_id": 4, "title": "[0.5] Flask Routing Example", "body": "Authentication Between Flask and ReactJS\n\nPython is a powerful language that is great for quickly developing powerful APIs.\n\nFlask is a great tool for routing a request path to a function call.\n\n```python\n@app.route('/my_func')\ndef my_func():\n\treturn results\n```\n\n\nIf you wanted to use Flask to perform database operations you'd find it convenient\nto use variable mapping in the path pointer. \n\n```python\n@app('/<username>/posts/<post_title>')\ndef get_post_by_title(username, post_title):\n\n\tuser = User.query.filter_by(username=username).first()\n\tif (not user) return {'msg': f'could not find the user {username}'}\n\t\n\tpost = Post.query.filter_by(user_id=user.id, title=post_title).first()\n\tif (not post) return {'msg': f'could not find the post {post_title} by {user.username}'}\n\t\n\treturn post.serialize\n```\n\n\n[IGNORE]\n```sql\n\tSELECT * FROM Post \n\tINNER JOIN Username_UserID_Ref_Table as IDTable\n\tWHERE Post.title == post_title AND\n\tPost.user_id == (SELECT user_id from IDTable WHERE IDTable.username == username)\n```\n[\\IGNORE]\n\n\n\n\n", "private": false, "draft": false, "created_at": "2022-11-09T07:30:49.412732", "updated_at": null}, {"id": 9, "user_id": 4, "title": "[1.5] Authentication System using Flask - Agile Documentation", "body": "BLANK", "private": false, "draft": false, "created_at": "2022-11-09T07:31:10.925410", "updated_at": null}, {"id": 10, "user_id": 4, "title": "[1] Authentication System using Flask", "body": "Authentication System Using Flask.\n\n# Forward\nFlask is a great way to create a simple authentication microservice which can be used as an API to serve a fronend applications using tools like ReactJS.\n\n\n# Setup Flask Configurations\n\n## Create Application and Admin Secret Keys\n## Create User Model\n## Create Route for Creating a User\n## Test\n### Postman\n### Unit Test\n\n## Create Login Route Part 1\n## Create Token Model and update User Model\nSaving the token in a database is a greate way to add extra security when using tokens.\nThis prevents the possiblity that a token was generated outside the server which could be malicious.\n\n## Create Login Route Part 2 (Generate Token)\n\n## Create logout route Part 1\n## Create require_token decorator\n## Create logout route Part 2 (use require_token decorator)\n\n## Create require_admin decorator\n## Create demote_admin route (tests require_admin decorator)\n\n# Conclusion", "private": false, "draft": false, "created_at": "2022-11-09T07:31:24.602551", "updated_at": null}, {"id": 11, "user_id": 4, "title": "[2] Authentication between Flask and React", "body": "Authentication Between Flask and ReactJS\n\nPython is a powerful language that is great for quickly developing powerful APIs.\n\nFlask is a great tool for routing a request path to a function call.\n\n```python\n@app.route('/my_func')\ndef my_func():\n\treturn results\n```\n\n\nIf you wanted to use Flask to perform database operations you'd find it convenient\nto use variable mapping in the path pointer. \n\n```python\n@app('/<username>/posts/<post_title>')\ndef get_post_by_title(username, post_title):\n\n\tuser = User.query.filter_by(username=username).first()\n\tif (not user) return {'msg': f'could not find the user {username}'}\n\t\n\tpost = Post.query.filter_by(user_id=user.id, title=post_title).first()\n\tif (not post) return {'msg': f'could not find the post {post_title} by {user.username}'}\n\t\n\treturn post.serialize\n```\n\n\n[IGNORE]\n```sql\n\tSELECT * FROM Post \n\tINNER JOIN Username_UserID_Ref_Table as IDTable\n\tWHERE Post.title == post_title AND\n\tPost.user_id == (SELECT user_id from IDTable WHERE IDTable.username == username)\n```\n[\\IGNORE]\n\n\n\n\n", "private": false, "draft": false, "created_at": "2022-11-09T07:31:45.443487", "updated_at": null}, {"id": 12, "user_id": 4, "title": "[3] Social Extension to Flask Authentication", "body": "# Notes\n[Isolate the flask auth microserver from the post Authentication between Flask and React into it's own post. ]\n[Update the Authentication between Flask and React to reference the flask auth post instead of building it all again.]\n[This will make creating a table of contents easy from a seperate post or by creating a post collection feature.]\n\n# Rough Idea\nAn isolated example of basic authentication in flask is a useful tool to have. \nFrom here we will isolate the flask auth application in it's own branch. \nAnd begin extending functinoality towards an application that has some basic social features.\n\n", "private": false, "draft": false, "created_at": "2022-11-09T07:32:03.786515", "updated_at": null}, {"id": 13, "user_id": 4, "title": "[3.5] Social Extension to Flask Authentication - Agile Documentation", "body": "BLANK", "private": false, "draft": false, "created_at": "2022-11-09T07:32:20.326405", "updated_at": null}, {"id": 14, "user_id": 4, "title": "[4] Blog Extension from Social Flask App", "body": "BLANK", "private": false, "draft": false, "created_at": "2022-11-09T07:32:53.055246", "updated_at": null}, {"id": 15, "user_id": 4, "title": "[4.5] Blog Extension from Social Flask App - Agile Documentation", "body": "BLANK", "private": false, "draft": false, "created_at": "2022-11-09T07:33:12.835124", "updated_at": null}, {"id": 16, "user_id": 4, "title": "[5] Messaging Extension of Social Flask App", "body": "\nWhile my repo contains the integration of blogging features they are not required for this extension.\n\n", "private": false, "draft": false, "created_at": "2022-11-09T07:33:32.677873", "updated_at": null}, {"id": 17, "user_id": 4, "title": "[5.5] Messaging Extension of Social Flask App - Agile Documentation", "body": "BLANK", "private": false, "draft": false, "created_at": "2022-11-09T07:33:48.845541", "updated_at": null}, {"id": 18, "user_id": 4, "title": "[6] Flask Selectable Features [Auth, Social, Messaging, Blog]", "body": "\nx   \n\nSome of these features are dependant on other features\n\n\nAuth is required by default and cannot be turned off.\nSocial is dependant on Auth\nMessaging is dependant on Social\nBlog is dependant on Auth by can be integrated with social.\n\n\n\n", "private": false, "draft": false, "created_at": "2022-11-09T07:34:07.631051", "updated_at": null}, {"id": 19, "user_id": 4, "title": "[6.5] Flask Selectable Features [Auth, Social, Messaging, Blog] - Agile Documentation", "body": "BLANK", "private": false, "draft": false, "created_at": "2022-11-09T07:34:28.037382", "updated_at": null}, {"id": 20, "user_id": 4, "title": "[7] Fractals", "body": "A true fork of the flask-api repo.\n\nIt uses all the features implemented in the flask-api and extends it's features but will not be appended to the main flask-api repo as a branch like the other features.\n\n\nThink about splitting up a large service into microserves that contain and maintain serpeate database relationships.\n", "private": false, "draft": false, "created_at": "2022-11-09T07:34:46.520269", "updated_at": null}, {"id": 21, "user_id": 4, "title": "[7.5] Fractals - Agile Documentation", "body": "[7.5] Fractals - Agile Documentation", "private": false, "draft": false, "created_at": "2022-11-09T07:34:56.801650", "updated_at": null}, {"id": 23, "user_id": 4, "title": "PostgreSQL Setup", "body": "\n# Install PostgreSQL\n\n#### Password Generation\nFirst generate a password however you'd like. I will use python to generate a password for the new user\n\n```python\nimport string\nimport secrets\nalphabet = string.ascii_letters + string.digits\npassword = ''.join(secrets.choice(alphabet) for i in range(32))\nprint(password)\n```\n\n```\naN16oCva-AWytSTpjn3WDG36xylfn3J3\n```\n\n## Login as default user\n```sql\npsql\n```\n\n# Create Secondary SUPER USER / No Password\n```sh\nsudo -u postgres createuser --superuser your_username\nsudo -u postgres createdb your_database\n```\n# Delete the User\nStart postgresql shell.\n```sh\npsql\n```\n\nDrop the user.\n```sql\nDROP USER your_username;\n\\q\n```\n\n## Create a user with password\nCreating a user this way will allow the use of a password.\n```sh\nsudo -u postgres createuser -P -s -e your_username\n```\n\n# Grant the new user adminstrative privileges over the new database\nStart postrgresql shell\n```sh\npsql\n```\n\nGrant permissions.\n```sql\nGRANT ALL PRIVILEGES ON DATABASE your_database TO your_username;\n\\q\n```\n\n# Connect to the database\n```sh\npsql -d your_databse -U your_username -W\n```\n\n\n\n\n\n### From Command Line (example)\n\n#### Remove this user\n\n### From psql shell\n```sql\nCREATE USER your_username WITH SUPERUSER PASSWORD 'your_password'\n```\n\n# Create Table\n```sql\nCREATE TABLE test (\n    id SERIALI PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    body VARCHAR(100) NOT NULL\n);\n```\n\n# Show Tables\n```sql\n\\dt\n```\n\n# Insert Row\n```sql\n\n```\n\n# Select Row\n# Remove Row\n# Delte Table\n# Delete database\n\n# Give privileges to the new user to create a database\n\n# Create a database with the new user\n\n# Grant the new user adminstrative privileges over the new database\n```sql\nGRANT ALL PRIVILEGES ON DATABASE flask_db TO sammy;\n```\n\n\n# Seperate Tutorial (Combine into large post with table of contents)\n# Connect Database to Flask", "private": false, "draft": false, "created_at": "2022-11-09T07:35:52.605360", "updated_at": null}, {"id": 25, "user_id": 4, "title": "Production Ready Flask + ReactJS Blog Tutorial w Heroku and Google Domain Services", "body": "# Production Ready Flask + ReactJS Blog Tutorial w Heroku and Google Domain Service#\n\nThis is an in-depth tutorial that will walk you through how to create a live moderen blog from scratch like the one you viewing this on.\n\n[NOTE] This tutorial series will be comprised of multiple posts uploaded sequentially. \n\n# Table of Contents\n * * Intro\n * * * Tech Stack\n * * * * Backend\n * * * * Frontend\n * * * * Testing\n\n * * Backend\n * * * Environment Setup\n * * * Flask API\n * * * * Models\n * * * * Views / Routes\n * * * Testing\n * * * * Postman\n * * * Deploy\n * * * * Heroku\n \n * * Frontend\n * * * Environment Setup\n * * * React Application\n * * * * Flask API Integration w/ Axios\n * * * * * User\n * * * * * Blog\n * * * * * * Post\n * * * * * * Comment\n * * * * Design w/ React Bootstrap\n * * * * * Implement React Markdown\n * * * Deploy\n * * * * Heroku\n\n# Intro\n# Tech Stack\n## Backend\n * Database - PostgreSQL\n * API - Python Flask\n * * SQLAlchemy\n * * Flask Migrate\n * * Flask CORS\n\n## Frontend\n * Website - Node ReactJS w/ Typescript\n * * Node Libraries:\n * * Axios\n * * Bootstrap\n * * Markdown\n\n## Testing\n * Postman\n\n\n\n# Benefits of using PostgreSQL vs SQLite\nHeroku filesystem is restored every day so the SQLite DB is restored to it's original state every day including all data changes.\n\n\n# Backend API Development using Flask and SQLAlchemy\n## SQLite development \n## Models\n## Routes\n### implement Pagnation on all get requests to secure database usage.\n## Decorators\n## Utilities\n## Testing Manually with Postman\n## Deployment \n### Create Heroku Application\n### Add Remote Heroku Endpoint for Git.\n#### Push To Heroku\n### Configuring Heroku Environment Variables\n## Switching to PostgreSQL\n### Updating Heroku Environment Variables to include PostgreSQL\nOnce the Flask Application is deployed to Heroku and the PostgreSQL addon provided by Heroku is installed it is time to configure the Flask Application to use the PostgreSQL Database.\n\nGo to the app location using the Heroku Dashboard.\nClick `Settings`. Scroll to `Config Vars` and click 'Reveal Config Vars`.\nAdd the key `SQLALCHEMY_DATABASE_URI` with your PostgreSQL Database URI endpoint. (Learn how to locate db URI)[https://www.google.com/]\n\n### Learn how to locate your Postgres DB URI\nHeroku Dashboard -> Your App -> Resources -> Heroku Postgres -> Settings -> View Credentials... -> Copy URI\nReplace the prefixed `postgres://` with `postgresql://`.\n\nUse the copied URI as the value for the `SQLALCHEMY_DATABASE_URI` key. \n\n\n### Restart Heroku Application\nMore -> Restart All Dynos\n\n# Frontend API Development using ReactJS w/ Typescript\n", "private": false, "draft": false, "created_at": "2022-11-09T07:36:22.865318", "updated_at": null}, {"id": 24, "user_id": 4, "title": "PostgresSQL Heroku Setup", "body": "\n# Heroku Addon Postgresel\n\n## Get Connection Information to Database\n\n# Test Connection using Local Flask Application\n### Set the SQLAlchemy Database URI Endpoint to the Heroku Postgres Database\n\n## Instantiate Database Tables\n\n## Run Local Server\n\n## Test Local Server + Heroku Postgres DB w/ Postman \n\n\n# Push Flask Application to Heroku\n\n## Configure Flask App Using Heroku Config\n\n\n## Test Live Flask API + Live Postgres DB w/ Postman", "private": false, "draft": false, "created_at": "2022-11-09T07:36:05.965816", "updated_at": null}, {"id": 22, "user_id": 4, "title": "Fauna - Agile Documentation", "body": "`[version 0.1.0]`\n\n## Write Up\n\nA mobile application that shows icons where animals have been recently based on user submissions.\n\nIf two many icons of the same type appear too close to each other draw a circle with the icon at the center of the circle instead of drawing the many icons.\nThis circle should show the approximate radius this animal has been seen in and a way to indicate how many times this animal was seen.\n\nOvertime the icons should fade or disappear based on the default time an icon should be displayed.\nHowever a filter can be used to view animals in areas during specified time periods or for all time.\n\nIf an area has many animal locators in too tight a space draw an ecosystem icon instead.\nWhen the icon is tapped display a list of sightings.\nA user can add to this list or reinforce or contest a sighting or activity indicator.\n\nUsers can post photos and videos of a sighting.\n\nSightings that are flagged as dangerous animal create a threat indicator using color. If it is many sighting of a bear then the icons will be replaced by a single icon with a range indicator. The range indicator and icon color will be set the threat level. A bear would be displayed as red whereas a snake will be displayed as yellow.\n\n\n## User Stories\nA user sees a deer and opens the Fauna app. They see a map and tap the screen where they think the deer is in relation to where they are.\nThis brings up an icon search list where they can select they most common icons or search for an icon of the animal they are looking for.\nThey tap the deer icon is the icon search and the location they tapped draws a deer icon.\n\nA user hears a blue heron's calls at night and can approximate where it is. The user sets the heron icon. The user then taps the heron icon again to modify some settings\nThe user sets the flag that they only heard the blue heron. \n\n## Figma Designs\n![Sketch 0](https://raw.githubusercontent.com/crispycret/images/main/Fauna/Figma/Fuana%20Sketch%20-%200.png)\n\n## Product Backlog\n\n## Data Flow Diagrams\n\n## UML Diagrams\n\n## Sprint 1 Development (2 weeks)\n### Sprint 1 Progress 1 (Day 3)\n### Sprint 1 Progress 2 (Day 6)\n### Sprint 1 Progress 3 (Day 9)\n### Sprint 1 Progress 4 (Day 11)\n### Sprint 1 Conclusion (Day 14)\n\n### Revisions Needed???\n\n## Sprint 2 Development (2 weeks)\n### Sprint 2 Progress 1 (Day 3)\n### Sprint 2 Progress 2 (Day 6)\n### Sprint 2 Progress 3 (Day 9)\n### Sprint 2 Progress 4 (Day 11)\n### Sprint 2 Conclusion (Day 14)\n\n### Revisions Needed???\n\n## Sprint 3 Development (2 weeks)\n### Sprint 3 Progress 1 (Day 3)\n### Sprint 3 Progress 2 (Day 6)\n### Sprint 3 Progress 3 (Day 9)\n### Sprint 3 Progress 4 (Day 11)\n### Sprint 3 Conclusion (Day 14)\n\n### Revisions Needed???\n\n## Sprint 4 Development (2 weeks)\n### Sprint 4 Progress 1 (Day 3)\n### Sprint 4 Progress 2 (Day 6)\n### Sprint 4 Progress 3 (Day 9)\n### Sprint 4 Progress 4 (Day 11)\n### Sprint 4 Conclusion (Day 14)\n\n### Revisions Needed???\n", "private": false, "draft": false, "created_at": "2022-11-09T07:35:35.635344", "updated_at": "2022-11-09T07:44:36.442545"}, {"id": 6, "user_id": 4, "title": "React Markup Test", "body": "# A demo of `react-markdown`\n\n`react-markdown` is a markdown component for React.\n\n\ud83d\udc49 Changes are re-rendered as you type.\n\n\ud83d\udc48 Try writing some markdown on the left.\n\n## Overview\n\n* Follows [CommonMark](https://commonmark.org)\n* Optionally follows [GitHub Flavored Markdown](https://github.github.com/gfm/)\n* Renders actual React elements instead of using `dangerouslySetInnerHTML`\n* Lets you define your own components (to render `MyHeading` instead of `h1`)\n* Has a lot of plugins\n\n## Table of contents\n\nHere is an example of a plugin in action\n([`remark-toc`](https://github.com/remarkjs/remark-toc)).\nThis section is replaced by an actual table of contents.\n\n## Syntax highlighting\n\nHere is an example of a plugin to highlight code:\n[`rehype-highlight`](https://github.com/rehypejs/rehype-highlight).\n\n```js\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport ReactMarkdown from 'react-markdown'\nimport rehypeHighlight from 'rehype-highlight'\n\nReactDOM.render(\n  <ReactMarkdown rehypePlugins={[rehypeHighlight]}>{'# Your markdown here'}</ReactMarkdown>,\n  document.querySelector('#content')\n)\n```\n\nPretty neat, eh?\n\n## GitHub flavored markdown (GFM)\n\nFor GFM, you can *also* use a plugin:\n[`remark-gfm`](https://github.com/remarkjs/react-markdown#use).\nIt adds support for GitHub-specific extensions to the language:\ntables, strikethrough, tasklists, and literal URLs.\n\nThese features **do not work by default**.\n\ud83d\udc46 Use the toggle above to add the plugin.\n\n| Feature    | Support              |\n| ---------: | :------------------- |\n| CommonMark | 100%                 |\n| GFM        | 100% w/ `remark-gfm` |\n\n~~strikethrough~~\n\n* [ ] task list\n* [x] checked item\n\nhttps://example.com\n\n## HTML in markdown\n\n\u26a0\ufe0f HTML in markdown is quite unsafe, but if you want to support it, you can\nuse [`rehype-raw`](https://github.com/rehypejs/rehype-raw).\nYou should probably combine it with\n[`rehype-sanitize`](https://github.com/rehypejs/rehype-sanitize).\n\n<blockquote>\n  \ud83d\udc46 Use the toggle above to add the plugin.\n</blockquote>\n\n## Components\n\nYou can pass components to change things:\n\n```js\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport ReactMarkdown from 'react-markdown'\nimport MyFancyRule from './components/my-fancy-rule.js'\n\nReactDOM.render(\n  <ReactMarkdown\n    components={{\n      // Use h2s instead of h1s\n      h1: 'h2',\n      // Use a component instead of hrs\n      hr: ({node, ...props}) => <MyFancyRule {...props} />\n    }}\n  >\n    # Your markdown here\n  </ReactMarkdown>,\n  document.querySelector('#content')\n)\n```\n\n## More info?\n\nMuch more info is available in the\n[readme on GitHub](https://github.com/remarkjs/react-markdown)!\n\n***\n\nA component by [Espen Hovlandsdal](https://espen.codes/)", "private": false, "draft": false, "created_at": "2022-11-09T07:29:27.386526", "updated_at": "2022-11-11T01:06:42.895267"}, {"id": 26, "user_id": 4, "title": "Email Verification in Flask w/ Twilio Verify", "body": "[Click Here for the Twilio Tutorial](https://www.twilio.com/blog/verify-email-address-python-flask-twilio-verify)\n\n\n* Create Twilio Account\n* Get a Twilio Phone Number\n* Create a SendGrid Account\n\n* Depending how complicated the process is on flask, create a system or management class to statically handle verification.\n* Bake in an Authentication Token using a one time secret key.\n\n[Note] Think about replacing an application secret key with a randomly generated unique key that is stored in the database upon login. After the token expires or a logout occurs, remove this random key from the database. This makes an encoding secret key temporary and unique to each user. This should increase security. If this key is ever cracked it is cracked for a single user, temporarily.\n\n", "private": false, "draft": false, "created_at": "2022-11-13T08:52:34.621815", "updated_at": null}, {"id": 27, "user_id": 4, "title": "Blog Development - Agile Development Documentation", "body": "![Agile Overview](https://github.com/crispycret/blog-webapp/blob/0.1.0/docs/Blog%20Web%20Flow%200.1.0.pdf)\n", "private": false, "draft": false, "created_at": "2022-11-15T15:39:26.529608", "updated_at": null}]